import * as i0 from "@angular/core";
/**
 * Emits mousedown, click, double click and keydown out of zone
 *
 * Emulates browser behavior of click and double click with new features:
 * 1. Supports touch events (tap and double tap)
 * 2. Ignores the first click in a double click with the side effect of a bit slower emission of the click event
 * 3. Allow customizing the delay after mouse down to count another mouse down as a double click
 */
export declare class SplitCustomEventsBehaviorDirective {
    private readonly elementRef;
    private readonly document;
    readonly multiClickThreshold: import("@angular/core").InputSignal<number>;
    readonly deltaInPx: import("@angular/core").InputSignal<number>;
    readonly mouseDown: import("@angular/core").OutputEmitterRef<MouseEvent | TouchEvent>;
    readonly click: import("@angular/core").OutputEmitterRef<void>;
    readonly dblClick: import("@angular/core").OutputEmitterRef<void>;
    readonly keyDown: import("@angular/core").OutputEmitterRef<KeyboardEvent>;
    constructor();
    static ɵfac: i0.ɵɵFactoryDeclaration<SplitCustomEventsBehaviorDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<SplitCustomEventsBehaviorDirective, "[asSplitCustomEventsBehavior]", never, { "multiClickThreshold": { "alias": "asSplitCustomMultiClickThreshold"; "required": true; "isSignal": true; }; "deltaInPx": { "alias": "asSplitCustomClickDeltaInPx"; "required": true; "isSignal": true; }; }, { "mouseDown": "asSplitCustomMouseDown"; "click": "asSplitCustomClick"; "dblClick": "asSplitCustomDblClick"; "keyDown": "asSplitCustomKeyDown"; }, never, never, true, never>;
}
