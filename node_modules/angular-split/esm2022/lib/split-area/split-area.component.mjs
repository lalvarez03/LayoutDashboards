import { ChangeDetectionStrategy, Component, HostBinding, booleanAttribute, computed, inject, input, isDevMode, } from '@angular/core';
import { SPLIT_AREA_CONTRACT, SplitComponent } from '../split/split.component';
import { createClassesString, mirrorSignal } from '../utils';
import { areaSizeTransform, boundaryAreaSizeTransform } from '../models';
import * as i0 from "@angular/core";
export class SplitAreaComponent {
    constructor() {
        this.split = inject(SplitComponent);
        this.size = input('auto', { transform: areaSizeTransform });
        this.minSize = input('*', { transform: boundaryAreaSizeTransform });
        this.maxSize = input('*', { transform: boundaryAreaSizeTransform });
        this.lockSize = input(false, { transform: booleanAttribute });
        this.visible = input(true, { transform: booleanAttribute });
        /**
         * @internal
         */
        this._internalSize = mirrorSignal(
        // As size is an input and we can change the size without the outside
        // listening to the change we need an intermediate writeable signal
        computed(() => {
            if (!this.visible()) {
                return 0;
            }
            const size = this.size();
            // auto acts the same as * in all calculations
            return size === 'auto' ? '*' : size;
        }));
        /**
         * @internal
         */
        this._normalizedMinSize = computed(() => this.normalizeMinSize());
        /**
         * @internal
         */
        this._normalizedMaxSize = computed(() => this.normalizeMaxSize());
        this.index = computed(() => this.split._areas().findIndex((area) => area === this));
        this.gridAreaNum = computed(() => this.index() * 2 + 1);
        this.hostClasses = computed(() => createClassesString({
            ['as-split-area']: true,
            ['as-min']: this.visible() && this._internalSize() === this._normalizedMinSize(),
            ['as-max']: this.visible() && this._internalSize() === this._normalizedMaxSize(),
            ['as-hidden']: !this.visible(),
        }));
    }
    get hostClassesBinding() {
        return this.hostClasses();
    }
    get hostGridColumnStyleBinding() {
        return this.split.direction() === 'horizontal' ? `${this.gridAreaNum()} / ${this.gridAreaNum()}` : undefined;
    }
    get hostGridRowStyleBinding() {
        return this.split.direction() === 'vertical' ? `${this.gridAreaNum()} / ${this.gridAreaNum()}` : undefined;
    }
    get hostPositionStyleBinding() {
        return this.split._isDragging() ? 'relative' : undefined;
    }
    normalizeMinSize() {
        const defaultMinSize = 0;
        if (!this.visible()) {
            return defaultMinSize;
        }
        const minSize = this.normalizeSizeBoundary(this.minSize, defaultMinSize);
        const size = this.size();
        if (size !== '*' && size !== 'auto' && size < minSize) {
            if (isDevMode()) {
                console.warn('as-split: size cannot be smaller than minSize');
            }
            return defaultMinSize;
        }
        return minSize;
    }
    normalizeMaxSize() {
        const defaultMaxSize = Infinity;
        if (!this.visible()) {
            return defaultMaxSize;
        }
        const maxSize = this.normalizeSizeBoundary(this.maxSize, defaultMaxSize);
        const size = this.size();
        if (size !== '*' && size !== 'auto' && size > maxSize) {
            if (isDevMode()) {
                console.warn('as-split: size cannot be larger than maxSize');
            }
            return defaultMaxSize;
        }
        return maxSize;
    }
    normalizeSizeBoundary(sizeBoundarySignal, defaultBoundarySize) {
        const size = this.size();
        const lockSize = this.lockSize();
        const boundarySize = sizeBoundarySignal();
        if (lockSize) {
            if (isDevMode() && boundarySize !== '*') {
                console.warn('as-split: lockSize overwrites maxSize/minSize');
            }
            if (size === '*' || size === 'auto') {
                if (isDevMode()) {
                    console.warn(`as-split: lockSize isn't supported on area with * size or without size`);
                }
                return defaultBoundarySize;
            }
            return size;
        }
        if (boundarySize === '*') {
            return defaultBoundarySize;
        }
        if (size === '*' || size === 'auto') {
            if (isDevMode()) {
                console.warn('as-split: maxSize/minSize not allowed on * or without size');
            }
            return defaultBoundarySize;
        }
        return boundarySize;
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: SplitAreaComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    /** @nocollapse */ static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.8", type: SplitAreaComponent, isStandalone: true, selector: "as-split-area", inputs: { size: { classPropertyName: "size", publicName: "size", isSignal: true, isRequired: false, transformFunction: null }, minSize: { classPropertyName: "minSize", publicName: "minSize", isSignal: true, isRequired: false, transformFunction: null }, maxSize: { classPropertyName: "maxSize", publicName: "maxSize", isSignal: true, isRequired: false, transformFunction: null }, lockSize: { classPropertyName: "lockSize", publicName: "lockSize", isSignal: true, isRequired: false, transformFunction: null }, visible: { classPropertyName: "visible", publicName: "visible", isSignal: true, isRequired: false, transformFunction: null } }, host: { properties: { "class": "this.hostClassesBinding", "style.grid-column": "this.hostGridColumnStyleBinding", "style.grid-row": "this.hostGridRowStyleBinding", "style.position": "this.hostPositionStyleBinding" } }, providers: [
            {
                provide: SPLIT_AREA_CONTRACT,
                useExisting: SplitAreaComponent,
            },
        ], exportAs: ["asSplitArea"], ngImport: i0, template: "<ng-content></ng-content>\n@if (split._isDragging()) {\n  <div class=\"as-iframe-fix\"></div>\n}\n", styles: [":host{overflow-x:hidden;overflow-y:auto}.as-horizontal>:host{height:100%}.as-vertical>:host{width:100%}.as-iframe-fix{position:absolute;top:0;left:0;width:100%;height:100%}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: SplitAreaComponent, decorators: [{
            type: Component,
            args: [{ selector: 'as-split-area', standalone: true, exportAs: 'asSplitArea', providers: [
                        {
                            provide: SPLIT_AREA_CONTRACT,
                            useExisting: SplitAreaComponent,
                        },
                    ], changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-content></ng-content>\n@if (split._isDragging()) {\n  <div class=\"as-iframe-fix\"></div>\n}\n", styles: [":host{overflow-x:hidden;overflow-y:auto}.as-horizontal>:host{height:100%}.as-vertical>:host{width:100%}.as-iframe-fix{position:absolute;top:0;left:0;width:100%;height:100%}\n"] }]
        }], propDecorators: { hostClassesBinding: [{
                type: HostBinding,
                args: ['class']
            }], hostGridColumnStyleBinding: [{
                type: HostBinding,
                args: ['style.grid-column']
            }], hostGridRowStyleBinding: [{
                type: HostBinding,
                args: ['style.grid-row']
            }], hostPositionStyleBinding: [{
                type: HostBinding,
                args: ['style.position']
            }] } });
//# sourceMappingURL=data:application/json;base64,