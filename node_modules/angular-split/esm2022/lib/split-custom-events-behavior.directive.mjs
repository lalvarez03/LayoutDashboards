import { Directive, ElementRef, inject, input, output } from '@angular/core';
import { gutterEventsEqualWithDelta, fromMouseDownEvent, fromMouseMoveEvent, fromMouseUpEvent, leaveNgZone, } from './utils';
import { delay, filter, fromEvent, map, mergeMap, of, repeat, scan, switchMap, take, takeUntil, tap, timeInterval, } from 'rxjs';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { DOCUMENT } from '@angular/common';
import * as i0 from "@angular/core";
/**
 * Emits mousedown, click, double click and keydown out of zone
 *
 * Emulates browser behavior of click and double click with new features:
 * 1. Supports touch events (tap and double tap)
 * 2. Ignores the first click in a double click with the side effect of a bit slower emission of the click event
 * 3. Allow customizing the delay after mouse down to count another mouse down as a double click
 */
export class SplitCustomEventsBehaviorDirective {
    constructor() {
        this.elementRef = inject(ElementRef);
        this.document = inject(DOCUMENT);
        this.multiClickThreshold = input.required({ alias: 'asSplitCustomMultiClickThreshold' });
        this.deltaInPx = input.required({ alias: 'asSplitCustomClickDeltaInPx' });
        this.mouseDown = output({ alias: 'asSplitCustomMouseDown' });
        this.click = output({ alias: 'asSplitCustomClick' });
        this.dblClick = output({ alias: 'asSplitCustomDblClick' });
        this.keyDown = output({ alias: 'asSplitCustomKeyDown' });
        fromEvent(this.elementRef.nativeElement, 'keydown')
            .pipe(leaveNgZone(), takeUntilDestroyed())
            .subscribe((e) => this.keyDown.emit(e));
        // We just need to know when drag start to cancel all click related interactions
        const dragStarted$ = fromMouseDownEvent(this.elementRef.nativeElement).pipe(switchMap((mouseDownEvent) => fromMouseMoveEvent(this.document).pipe(filter((e) => !gutterEventsEqualWithDelta(mouseDownEvent, e, this.deltaInPx(), this.elementRef.nativeElement)), take(1), map(() => true), takeUntil(fromMouseUpEvent(this.document)))));
        fromMouseDownEvent(this.elementRef.nativeElement)
            .pipe(tap((e) => this.mouseDown.emit(e)), 
        // Gather mousedown events intervals to identify whether it is a single double or more click
        timeInterval(), 
        // We only count a click as part of a multi click if the multiClickThreshold wasn't reached
        scan((sum, { interval }) => (interval >= this.multiClickThreshold() ? 1 : sum + 1), 0), 
        // As mouseup always comes after mousedown if the delayed mouseup has yet to come
        // but a new mousedown arrived we can discard the older mouseup as we are part of a multi click
        switchMap((numOfConsecutiveClicks) => 
        // In case of a double click we directly emit as we don't care about more than two consecutive clicks
        // so we don't have to wait compared to a single click that might be followed by another for a double.
        // In case of a mouse up that was too long after the mouse down
        // we don't have to wait as we know it won't be a multi click but a single click
        fromMouseUpEvent(this.elementRef.nativeElement).pipe(timeInterval(), take(1), numOfConsecutiveClicks === 2
            ? map(() => numOfConsecutiveClicks)
            : mergeMap(({ interval }) => interval >= this.multiClickThreshold()
                ? of(numOfConsecutiveClicks)
                : of(numOfConsecutiveClicks).pipe(delay(this.multiClickThreshold() - interval))))), 
        // Discard everything once drag started and listen again (repeat) to mouse down
        takeUntil(dragStarted$), repeat(), leaveNgZone(), takeUntilDestroyed())
            .subscribe((amount) => {
            if (amount === 1) {
                this.click.emit();
            }
            else if (amount === 2) {
                this.dblClick.emit();
            }
        });
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: SplitCustomEventsBehaviorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    /** @nocollapse */ static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.8", type: SplitCustomEventsBehaviorDirective, isStandalone: true, selector: "[asSplitCustomEventsBehavior]", inputs: { multiClickThreshold: { classPropertyName: "multiClickThreshold", publicName: "asSplitCustomMultiClickThreshold", isSignal: true, isRequired: true, transformFunction: null }, deltaInPx: { classPropertyName: "deltaInPx", publicName: "asSplitCustomClickDeltaInPx", isSignal: true, isRequired: true, transformFunction: null } }, outputs: { mouseDown: "asSplitCustomMouseDown", click: "asSplitCustomClick", dblClick: "asSplitCustomDblClick", keyDown: "asSplitCustomKeyDown" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: SplitCustomEventsBehaviorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[asSplitCustomEventsBehavior]',
                    standalone: true,
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,