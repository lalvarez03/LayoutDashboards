import { Injector, Directive, Input, ViewContainerRef, TemplateRef } from '@angular/core';
import { GUTTER_NUM_TOKEN } from './gutter-num-token';
import * as i0 from "@angular/core";
/**
 * This directive allows creating a dynamic injector inside ngFor
 * with dynamic gutter num and expose the injector for ngTemplateOutlet usage
 */
export class SplitGutterDynamicInjectorDirective {
    set gutterNum(value) {
        this.vcr.clear();
        const injector = Injector.create({
            providers: [
                {
                    provide: GUTTER_NUM_TOKEN,
                    useValue: value,
                },
            ],
            parent: this.vcr.injector,
        });
        this.vcr.createEmbeddedView(this.templateRef, { $implicit: injector });
    }
    constructor(vcr, templateRef) {
        this.vcr = vcr;
        this.templateRef = templateRef;
    }
    static ngTemplateContextGuard(dir, ctx) {
        return true;
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: SplitGutterDynamicInjectorDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    /** @nocollapse */ static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.8", type: SplitGutterDynamicInjectorDirective, isStandalone: true, selector: "[asSplitGutterDynamicInjector]", inputs: { gutterNum: ["asSplitGutterDynamicInjector", "gutterNum"] }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: SplitGutterDynamicInjectorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[asSplitGutterDynamicInjector]',
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }], propDecorators: { gutterNum: [{
                type: Input,
                args: ['asSplitGutterDynamicInjector']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXQtZ3V0dGVyLWR5bmFtaWMtaW5qZWN0b3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1zcGxpdC9zcmMvbGliL2d1dHRlci9zcGxpdC1ndXR0ZXItZHluYW1pYy1pbmplY3Rvci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUN6RixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTs7QUFNckQ7OztHQUdHO0FBS0gsTUFBTSxPQUFPLG1DQUFtQztJQUM5QyxJQUNJLFNBQVMsQ0FBQyxLQUFhO1FBQ3pCLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUE7UUFFaEIsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUMvQixTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLGdCQUFnQjtvQkFDekIsUUFBUSxFQUFFLEtBQUs7aUJBQ2hCO2FBQ0Y7WUFDRCxNQUFNLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRO1NBQzFCLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFBO0lBQ3hFLENBQUM7SUFFRCxZQUNVLEdBQXFCLEVBQ3JCLFdBQW1FO1FBRG5FLFFBQUcsR0FBSCxHQUFHLENBQWtCO1FBQ3JCLGdCQUFXLEdBQVgsV0FBVyxDQUF3RDtJQUMxRSxDQUFDO0lBRUosTUFBTSxDQUFDLHNCQUFzQixDQUMzQixHQUF3QyxFQUN4QyxHQUFZO1FBRVosT0FBTyxJQUFJLENBQUE7SUFDYixDQUFDO2lJQTVCVSxtQ0FBbUM7cUhBQW5DLG1DQUFtQzs7MkZBQW5DLG1DQUFtQztrQkFKL0MsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZ0NBQWdDO29CQUMxQyxVQUFVLEVBQUUsSUFBSTtpQkFDakI7K0dBR0ssU0FBUztzQkFEWixLQUFLO3VCQUFDLDhCQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdG9yLCBEaXJlY3RpdmUsIElucHV0LCBWaWV3Q29udGFpbmVyUmVmLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXG5pbXBvcnQgeyBHVVRURVJfTlVNX1RPS0VOIH0gZnJvbSAnLi9ndXR0ZXItbnVtLXRva2VuJ1xuXG5pbnRlcmZhY2UgU3BsaXRHdXR0ZXJEeW5hbWljSW5qZWN0b3JUZW1wbGF0ZUNvbnRleHQge1xuICAkaW1wbGljaXQ6IEluamVjdG9yXG59XG5cbi8qKlxuICogVGhpcyBkaXJlY3RpdmUgYWxsb3dzIGNyZWF0aW5nIGEgZHluYW1pYyBpbmplY3RvciBpbnNpZGUgbmdGb3JcbiAqIHdpdGggZHluYW1pYyBndXR0ZXIgbnVtIGFuZCBleHBvc2UgdGhlIGluamVjdG9yIGZvciBuZ1RlbXBsYXRlT3V0bGV0IHVzYWdlXG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1thc1NwbGl0R3V0dGVyRHluYW1pY0luamVjdG9yXScsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG59KVxuZXhwb3J0IGNsYXNzIFNwbGl0R3V0dGVyRHluYW1pY0luamVjdG9yRGlyZWN0aXZlIHtcbiAgQElucHV0KCdhc1NwbGl0R3V0dGVyRHluYW1pY0luamVjdG9yJylcbiAgc2V0IGd1dHRlck51bSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy52Y3IuY2xlYXIoKVxuXG4gICAgY29uc3QgaW5qZWN0b3IgPSBJbmplY3Rvci5jcmVhdGUoe1xuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBHVVRURVJfTlVNX1RPS0VOLFxuICAgICAgICAgIHVzZVZhbHVlOiB2YWx1ZSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBwYXJlbnQ6IHRoaXMudmNyLmluamVjdG9yLFxuICAgIH0pXG5cbiAgICB0aGlzLnZjci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZVJlZiwgeyAkaW1wbGljaXQ6IGluamVjdG9yIH0pXG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHZjcjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxTcGxpdEd1dHRlckR5bmFtaWNJbmplY3RvclRlbXBsYXRlQ29udGV4dD4sXG4gICkge31cblxuICBzdGF0aWMgbmdUZW1wbGF0ZUNvbnRleHRHdWFyZChcbiAgICBkaXI6IFNwbGl0R3V0dGVyRHluYW1pY0luamVjdG9yRGlyZWN0aXZlLFxuICAgIGN0eDogdW5rbm93bixcbiAgKTogY3R4IGlzIFNwbGl0R3V0dGVyRHluYW1pY0luamVjdG9yVGVtcGxhdGVDb250ZXh0IHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG59XG4iXX0=