import { Directive, TemplateRef } from '@angular/core';
import * as i0 from "@angular/core";
export class SplitGutterDirective {
    constructor(template) {
        this.template = template;
        /**
         * The map holds reference to the drag handle elements inside instances
         * of the provided template.
         */
        this.gutterToHandleElementMap = new Map();
        /**
         * The map holds reference to the excluded drag elements inside instances
         * of the provided template.
         */
        this.gutterToExcludeDragElementMap = new Map();
    }
    canStartDragging(originElement, gutterNum) {
        if (this.gutterToExcludeDragElementMap.has(gutterNum)) {
            const isInsideExclude = this.gutterToExcludeDragElementMap
                .get(gutterNum)
                .some((gutterExcludeElement) => gutterExcludeElement.nativeElement.contains(originElement));
            if (isInsideExclude) {
                return false;
            }
        }
        if (this.gutterToHandleElementMap.has(gutterNum)) {
            return this.gutterToHandleElementMap
                .get(gutterNum)
                .some((gutterHandleElement) => gutterHandleElement.nativeElement.contains(originElement));
        }
        return true;
    }
    addToMap(map, gutterNum, elementRef) {
        if (map.has(gutterNum)) {
            map.get(gutterNum).push(elementRef);
        }
        else {
            map.set(gutterNum, [elementRef]);
        }
    }
    removedFromMap(map, gutterNum, elementRef) {
        const elements = map.get(gutterNum);
        elements.splice(elements.indexOf(elementRef), 1);
        if (elements.length === 0) {
            map.delete(gutterNum);
        }
    }
    static ngTemplateContextGuard(dir, ctx) {
        return true;
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: SplitGutterDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    /** @nocollapse */ static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.8", type: SplitGutterDirective, isStandalone: true, selector: "[asSplitGutter]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: SplitGutterDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[asSplitGutter]',
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: i0.TemplateRef }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXQtZ3V0dGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItc3BsaXQvc3JjL2xpYi9ndXR0ZXIvc3BsaXQtZ3V0dGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFjLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQTs7QUF1Q2xFLE1BQU0sT0FBTyxvQkFBb0I7SUFZL0IsWUFBbUIsUUFBaUQ7UUFBakQsYUFBUSxHQUFSLFFBQVEsQ0FBeUM7UUFYcEU7OztXQUdHO1FBQ0gsNkJBQXdCLEdBQUcsSUFBSSxHQUFHLEVBQXFDLENBQUE7UUFDdkU7OztXQUdHO1FBQ0gsa0NBQTZCLEdBQUcsSUFBSSxHQUFHLEVBQXFDLENBQUE7SUFFTCxDQUFDO0lBRXhFLGdCQUFnQixDQUFDLGFBQTBCLEVBQUUsU0FBaUI7UUFDNUQsSUFBSSxJQUFJLENBQUMsNkJBQTZCLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUM7WUFDdEQsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLDZCQUE2QjtpQkFDdkQsR0FBRyxDQUFDLFNBQVMsQ0FBQztpQkFDZCxJQUFJLENBQUMsQ0FBQyxvQkFBb0IsRUFBRSxFQUFFLENBQUMsb0JBQW9CLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFBO1lBRTdGLElBQUksZUFBZSxFQUFFLENBQUM7Z0JBQ3BCLE9BQU8sS0FBSyxDQUFBO1lBQ2QsQ0FBQztRQUNILENBQUM7UUFFRCxJQUFJLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztZQUNqRCxPQUFPLElBQUksQ0FBQyx3QkFBd0I7aUJBQ2pDLEdBQUcsQ0FBQyxTQUFTLENBQUM7aUJBQ2QsSUFBSSxDQUFDLENBQUMsbUJBQW1CLEVBQUUsRUFBRSxDQUFDLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQTtRQUM3RixDQUFDO1FBRUQsT0FBTyxJQUFJLENBQUE7SUFDYixDQUFDO0lBRUQsUUFBUSxDQUFDLEdBQTJDLEVBQUUsU0FBaUIsRUFBRSxVQUFtQztRQUMxRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztZQUN2QixHQUFHLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUNyQyxDQUFDO2FBQU0sQ0FBQztZQUNOLEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQTtRQUNsQyxDQUFDO0lBQ0gsQ0FBQztJQUVELGNBQWMsQ0FBQyxHQUEyQyxFQUFFLFNBQWlCLEVBQUUsVUFBbUM7UUFDaEgsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUNuQyxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFFaEQsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQzFCLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDdkIsQ0FBQztJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsc0JBQXNCLENBQUMsR0FBeUIsRUFBRSxHQUFZO1FBQ25FLE9BQU8sSUFBSSxDQUFBO0lBQ2IsQ0FBQztpSUFyRFUsb0JBQW9CO3FIQUFwQixvQkFBb0I7OzJGQUFwQixvQkFBb0I7a0JBSmhDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtvQkFDM0IsVUFBVSxFQUFFLElBQUk7aUJBQ2pCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXG5pbXBvcnQgeyBTcGxpdEFyZWFDb21wb25lbnQgfSBmcm9tICcuLi9zcGxpdC1hcmVhL3NwbGl0LWFyZWEuY29tcG9uZW50J1xuXG5leHBvcnQgaW50ZXJmYWNlIFNwbGl0R3V0dGVyVGVtcGxhdGVDb250ZXh0IHtcbiAgLyoqXG4gICAqIFRoZSBhcmVhIGJlZm9yZSB0aGUgZ3V0dGVyLlxuICAgKiBJbiBSVEwgdGhlIHJpZ2h0IGFyZWEgYW5kIGluIExUUiB0aGUgbGVmdCBhcmVhXG4gICAqL1xuICBhcmVhQmVmb3JlOiBTcGxpdEFyZWFDb21wb25lbnRcbiAgLyoqXG4gICAqIFRoZSBhcmVhIGFmdGVyIHRoZSBndXR0ZXIuXG4gICAqIEluIFJUTCB0aGUgbGVmdCBhcmVhIGFuZCBpbiBMVFIgdGhlIHJpZ2h0IGFyZWFcbiAgICovXG4gIGFyZWFBZnRlcjogU3BsaXRBcmVhQ29tcG9uZW50XG4gIC8qKlxuICAgKiBUaGUgYWJzb2x1dGUgbnVtYmVyIG9mIHRoZSBndXR0ZXIgYmFzZWQgb24gZGlyZWN0aW9uIChSVEwgYW5kIExUUikuXG4gICAqIEZpcnN0IGd1dHRlciBpcyAxLCBzZWNvbmQgaXMgMiwgZXRjLi4uXG4gICAqL1xuICBndXR0ZXJOdW06IG51bWJlclxuICAvKipcbiAgICogV2hldGhlciB0aGlzIGlzIHRoZSBmaXJzdCBndXR0ZXIuXG4gICAqIEluIFJUTCB0aGUgbW9zdCByaWdodCBhcmVhIGFuZCBpbiBMVFIgdGhlIG1vc3QgbGVmdCBhcmVhXG4gICAqL1xuICBmaXJzdDogYm9vbGVhblxuICAvKipcbiAgICogV2hldGhlciB0aGlzIGlzIHRoZSBsYXN0IGd1dHRlci5cbiAgICogSW4gUlRMIHRoZSBtb3N0IGxlZnQgYXJlYSBhbmQgaW4gTFRSIHRoZSBtb3N0IHJpZ2h0IGFyZWFcbiAgICovXG4gIGxhc3Q6IGJvb2xlYW5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGd1dHRlciBpcyBiZWluZyBkcmFnZ2VkIG5vd1xuICAgKi9cbiAgaXNEcmFnZ2VkOiBib29sZWFuXG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1thc1NwbGl0R3V0dGVyXScsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG59KVxuZXhwb3J0IGNsYXNzIFNwbGl0R3V0dGVyRGlyZWN0aXZlIHtcbiAgLyoqXG4gICAqIFRoZSBtYXAgaG9sZHMgcmVmZXJlbmNlIHRvIHRoZSBkcmFnIGhhbmRsZSBlbGVtZW50cyBpbnNpZGUgaW5zdGFuY2VzXG4gICAqIG9mIHRoZSBwcm92aWRlZCB0ZW1wbGF0ZS5cbiAgICovXG4gIGd1dHRlclRvSGFuZGxlRWxlbWVudE1hcCA9IG5ldyBNYXA8bnVtYmVyLCBFbGVtZW50UmVmPEhUTUxFbGVtZW50PltdPigpXG4gIC8qKlxuICAgKiBUaGUgbWFwIGhvbGRzIHJlZmVyZW5jZSB0byB0aGUgZXhjbHVkZWQgZHJhZyBlbGVtZW50cyBpbnNpZGUgaW5zdGFuY2VzXG4gICAqIG9mIHRoZSBwcm92aWRlZCB0ZW1wbGF0ZS5cbiAgICovXG4gIGd1dHRlclRvRXhjbHVkZURyYWdFbGVtZW50TWFwID0gbmV3IE1hcDxudW1iZXIsIEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+W10+KClcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPFNwbGl0R3V0dGVyVGVtcGxhdGVDb250ZXh0Pikge31cblxuICBjYW5TdGFydERyYWdnaW5nKG9yaWdpbkVsZW1lbnQ6IEhUTUxFbGVtZW50LCBndXR0ZXJOdW06IG51bWJlcikge1xuICAgIGlmICh0aGlzLmd1dHRlclRvRXhjbHVkZURyYWdFbGVtZW50TWFwLmhhcyhndXR0ZXJOdW0pKSB7XG4gICAgICBjb25zdCBpc0luc2lkZUV4Y2x1ZGUgPSB0aGlzLmd1dHRlclRvRXhjbHVkZURyYWdFbGVtZW50TWFwXG4gICAgICAgIC5nZXQoZ3V0dGVyTnVtKVxuICAgICAgICAuc29tZSgoZ3V0dGVyRXhjbHVkZUVsZW1lbnQpID0+IGd1dHRlckV4Y2x1ZGVFbGVtZW50Lm5hdGl2ZUVsZW1lbnQuY29udGFpbnMob3JpZ2luRWxlbWVudCkpXG5cbiAgICAgIGlmIChpc0luc2lkZUV4Y2x1ZGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZ3V0dGVyVG9IYW5kbGVFbGVtZW50TWFwLmhhcyhndXR0ZXJOdW0pKSB7XG4gICAgICByZXR1cm4gdGhpcy5ndXR0ZXJUb0hhbmRsZUVsZW1lbnRNYXBcbiAgICAgICAgLmdldChndXR0ZXJOdW0pXG4gICAgICAgIC5zb21lKChndXR0ZXJIYW5kbGVFbGVtZW50KSA9PiBndXR0ZXJIYW5kbGVFbGVtZW50Lm5hdGl2ZUVsZW1lbnQuY29udGFpbnMob3JpZ2luRWxlbWVudCkpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGFkZFRvTWFwKG1hcDogTWFwPG51bWJlciwgRWxlbWVudFJlZjxIVE1MRWxlbWVudD5bXT4sIGd1dHRlck51bTogbnVtYmVyLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50Pikge1xuICAgIGlmIChtYXAuaGFzKGd1dHRlck51bSkpIHtcbiAgICAgIG1hcC5nZXQoZ3V0dGVyTnVtKS5wdXNoKGVsZW1lbnRSZWYpXG4gICAgfSBlbHNlIHtcbiAgICAgIG1hcC5zZXQoZ3V0dGVyTnVtLCBbZWxlbWVudFJlZl0pXG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlZEZyb21NYXAobWFwOiBNYXA8bnVtYmVyLCBFbGVtZW50UmVmPEhUTUxFbGVtZW50PltdPiwgZ3V0dGVyTnVtOiBudW1iZXIsIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+KSB7XG4gICAgY29uc3QgZWxlbWVudHMgPSBtYXAuZ2V0KGd1dHRlck51bSlcbiAgICBlbGVtZW50cy5zcGxpY2UoZWxlbWVudHMuaW5kZXhPZihlbGVtZW50UmVmKSwgMSlcblxuICAgIGlmIChlbGVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgIG1hcC5kZWxldGUoZ3V0dGVyTnVtKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBuZ1RlbXBsYXRlQ29udGV4dEd1YXJkKGRpcjogU3BsaXRHdXR0ZXJEaXJlY3RpdmUsIGN0eDogdW5rbm93bik6IGN0eCBpcyBTcGxpdEd1dHRlclRlbXBsYXRlQ29udGV4dCB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxufVxuIl19