import { Directive, Inject, ElementRef } from '@angular/core';
import { SplitGutterDirective } from './split-gutter.directive';
import { GUTTER_NUM_TOKEN } from './gutter-num-token';
import * as i0 from "@angular/core";
import * as i1 from "./split-gutter.directive";
export class SplitGutterExcludeFromDragDirective {
    constructor(gutterNum, elementRef, gutterDir) {
        this.gutterNum = gutterNum;
        this.elementRef = elementRef;
        this.gutterDir = gutterDir;
    }
    ngOnInit() {
        this.gutterDir.addToMap(this.gutterDir.gutterToExcludeDragElementMap, this.gutterNum, this.elementRef);
    }
    ngOnDestroy() {
        this.gutterDir.removedFromMap(this.gutterDir.gutterToExcludeDragElementMap, this.gutterNum, this.elementRef);
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: SplitGutterExcludeFromDragDirective, deps: [{ token: GUTTER_NUM_TOKEN }, { token: i0.ElementRef }, { token: i1.SplitGutterDirective }], target: i0.ɵɵFactoryTarget.Directive }); }
    /** @nocollapse */ static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.8", type: SplitGutterExcludeFromDragDirective, isStandalone: true, selector: "[asSplitGutterExcludeFromDrag]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: SplitGutterExcludeFromDragDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[asSplitGutterExcludeFromDrag]',
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [GUTTER_NUM_TOKEN]
                }] }, { type: i0.ElementRef }, { type: i1.SplitGutterDirective }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXQtZ3V0dGVyLWV4Y2x1ZGUtZnJvbS1kcmFnLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItc3BsaXQvc3JjL2xpYi9ndXR0ZXIvc3BsaXQtZ3V0dGVyLWV4Y2x1ZGUtZnJvbS1kcmFnLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFxQixNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBQ2hGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFBO0FBQy9ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG9CQUFvQixDQUFBOzs7QUFNckQsTUFBTSxPQUFPLG1DQUFtQztJQUM5QyxZQUNvQyxTQUFpQixFQUMzQyxVQUFtQyxFQUNuQyxTQUErQjtRQUZMLGNBQVMsR0FBVCxTQUFTLENBQVE7UUFDM0MsZUFBVSxHQUFWLFVBQVUsQ0FBeUI7UUFDbkMsY0FBUyxHQUFULFNBQVMsQ0FBc0I7SUFDdEMsQ0FBQztJQUVKLFFBQVE7UUFDTixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLDZCQUE2QixFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQ3hHLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyw2QkFBNkIsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUM5RyxDQUFDO2lJQWJVLG1DQUFtQyxrQkFFcEMsZ0JBQWdCO3FIQUZmLG1DQUFtQzs7MkZBQW5DLG1DQUFtQztrQkFKL0MsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZ0NBQWdDO29CQUMxQyxVQUFVLEVBQUUsSUFBSTtpQkFDakI7OzBCQUdJLE1BQU07MkJBQUMsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBPbkluaXQsIE9uRGVzdHJveSwgSW5qZWN0LCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcbmltcG9ydCB7IFNwbGl0R3V0dGVyRGlyZWN0aXZlIH0gZnJvbSAnLi9zcGxpdC1ndXR0ZXIuZGlyZWN0aXZlJ1xuaW1wb3J0IHsgR1VUVEVSX05VTV9UT0tFTiB9IGZyb20gJy4vZ3V0dGVyLW51bS10b2tlbidcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2FzU3BsaXRHdXR0ZXJFeGNsdWRlRnJvbURyYWddJyxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbn0pXG5leHBvcnQgY2xhc3MgU3BsaXRHdXR0ZXJFeGNsdWRlRnJvbURyYWdEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoR1VUVEVSX05VTV9UT0tFTikgcHJpdmF0ZSBndXR0ZXJOdW06IG51bWJlcixcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgIHByaXZhdGUgZ3V0dGVyRGlyOiBTcGxpdEd1dHRlckRpcmVjdGl2ZSxcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuZ3V0dGVyRGlyLmFkZFRvTWFwKHRoaXMuZ3V0dGVyRGlyLmd1dHRlclRvRXhjbHVkZURyYWdFbGVtZW50TWFwLCB0aGlzLmd1dHRlck51bSwgdGhpcy5lbGVtZW50UmVmKVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5ndXR0ZXJEaXIucmVtb3ZlZEZyb21NYXAodGhpcy5ndXR0ZXJEaXIuZ3V0dGVyVG9FeGNsdWRlRHJhZ0VsZW1lbnRNYXAsIHRoaXMuZ3V0dGVyTnVtLCB0aGlzLmVsZW1lbnRSZWYpXG4gIH1cbn1cbiJdfQ==