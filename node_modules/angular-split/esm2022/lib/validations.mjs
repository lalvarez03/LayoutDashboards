import { isDevMode } from '@angular/core';
import { sum } from './utils';
export function areAreasValid(areas, unit) {
    if (areas.length === 0) {
        return true;
    }
    const wildcardAreas = areas.filter((area) => area._internalSize() === '*');
    if (wildcardAreas.length > 1) {
        if (isDevMode()) {
            console.warn('as-split: Maximum one * area is allowed');
        }
        return false;
    }
    if (unit === 'pixel') {
        if (wildcardAreas.length === 1) {
            return true;
        }
        if (isDevMode()) {
            console.warn('as-split: Pixel mode must have exactly one * area');
        }
        return false;
    }
    const sumPercent = sum(areas, (area) => {
        const size = area._internalSize();
        return size === '*' ? 0 : size;
    });
    // As percent calculation isn't perfect we allow for a small margin of error
    if (wildcardAreas.length === 1) {
        if (sumPercent <= 100.1) {
            return true;
        }
        if (isDevMode()) {
            console.warn(`as-split: Percent areas must total 100%`);
        }
        return false;
    }
    if (sumPercent < 99.9 || sumPercent > 100.1) {
        if (isDevMode()) {
            console.warn('as-split: Percent areas must total 100%');
        }
        return false;
    }
    return true;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLXNwbGl0L3NyYy9saWIvdmFsaWRhdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUd6QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sU0FBUyxDQUFBO0FBRTdCLE1BQU0sVUFBVSxhQUFhLENBQUMsS0FBb0MsRUFBRSxJQUFlO0lBQ2pGLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUN2QixPQUFPLElBQUksQ0FBQTtJQUNiLENBQUM7SUFFRCxNQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEtBQUssR0FBRyxDQUFDLENBQUE7SUFFMUUsSUFBSSxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQzdCLElBQUksU0FBUyxFQUFFLEVBQUUsQ0FBQztZQUNoQixPQUFPLENBQUMsSUFBSSxDQUFDLHlDQUF5QyxDQUFDLENBQUE7UUFDekQsQ0FBQztRQUVELE9BQU8sS0FBSyxDQUFBO0lBQ2QsQ0FBQztJQUVELElBQUksSUFBSSxLQUFLLE9BQU8sRUFBRSxDQUFDO1FBQ3JCLElBQUksYUFBYSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUMvQixPQUFPLElBQUksQ0FBQTtRQUNiLENBQUM7UUFFRCxJQUFJLFNBQVMsRUFBRSxFQUFFLENBQUM7WUFDaEIsT0FBTyxDQUFDLElBQUksQ0FBQyxtREFBbUQsQ0FBQyxDQUFBO1FBQ25FLENBQUM7UUFFRCxPQUFPLEtBQUssQ0FBQTtJQUNkLENBQUM7SUFFRCxNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDckMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFBO1FBQ2pDLE9BQU8sSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUE7SUFDaEMsQ0FBQyxDQUFDLENBQUE7SUFFRiw0RUFBNEU7SUFDNUUsSUFBSSxhQUFhLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQy9CLElBQUksVUFBVSxJQUFJLEtBQUssRUFBRSxDQUFDO1lBQ3hCLE9BQU8sSUFBSSxDQUFBO1FBQ2IsQ0FBQztRQUVELElBQUksU0FBUyxFQUFFLEVBQUUsQ0FBQztZQUNoQixPQUFPLENBQUMsSUFBSSxDQUFDLHlDQUF5QyxDQUFDLENBQUE7UUFDekQsQ0FBQztRQUVELE9BQU8sS0FBSyxDQUFBO0lBQ2QsQ0FBQztJQUVELElBQUksVUFBVSxHQUFHLElBQUksSUFBSSxVQUFVLEdBQUcsS0FBSyxFQUFFLENBQUM7UUFDNUMsSUFBSSxTQUFTLEVBQUUsRUFBRSxDQUFDO1lBQ2hCLE9BQU8sQ0FBQyxJQUFJLENBQUMseUNBQXlDLENBQUMsQ0FBQTtRQUN6RCxDQUFDO1FBRUQsT0FBTyxLQUFLLENBQUE7SUFDZCxDQUFDO0lBRUQsT0FBTyxJQUFJLENBQUE7QUFDYixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNEZXZNb2RlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcbmltcG9ydCB7IFNwbGl0VW5pdCB9IGZyb20gJy4vbW9kZWxzJ1xuaW1wb3J0IHsgU3BsaXRBcmVhQ29tcG9uZW50IH0gZnJvbSAnLi9zcGxpdC1hcmVhL3NwbGl0LWFyZWEuY29tcG9uZW50J1xuaW1wb3J0IHsgc3VtIH0gZnJvbSAnLi91dGlscydcblxuZXhwb3J0IGZ1bmN0aW9uIGFyZUFyZWFzVmFsaWQoYXJlYXM6IHJlYWRvbmx5IFNwbGl0QXJlYUNvbXBvbmVudFtdLCB1bml0OiBTcGxpdFVuaXQpOiBib29sZWFuIHtcbiAgaWYgKGFyZWFzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBjb25zdCB3aWxkY2FyZEFyZWFzID0gYXJlYXMuZmlsdGVyKChhcmVhKSA9PiBhcmVhLl9pbnRlcm5hbFNpemUoKSA9PT0gJyonKVxuXG4gIGlmICh3aWxkY2FyZEFyZWFzLmxlbmd0aCA+IDEpIHtcbiAgICBpZiAoaXNEZXZNb2RlKCkpIHtcbiAgICAgIGNvbnNvbGUud2FybignYXMtc3BsaXQ6IE1heGltdW0gb25lICogYXJlYSBpcyBhbGxvd2VkJylcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGlmICh1bml0ID09PSAncGl4ZWwnKSB7XG4gICAgaWYgKHdpbGRjYXJkQXJlYXMubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChpc0Rldk1vZGUoKSkge1xuICAgICAgY29uc29sZS53YXJuKCdhcy1zcGxpdDogUGl4ZWwgbW9kZSBtdXN0IGhhdmUgZXhhY3RseSBvbmUgKiBhcmVhJylcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGNvbnN0IHN1bVBlcmNlbnQgPSBzdW0oYXJlYXMsIChhcmVhKSA9PiB7XG4gICAgY29uc3Qgc2l6ZSA9IGFyZWEuX2ludGVybmFsU2l6ZSgpXG4gICAgcmV0dXJuIHNpemUgPT09ICcqJyA/IDAgOiBzaXplXG4gIH0pXG5cbiAgLy8gQXMgcGVyY2VudCBjYWxjdWxhdGlvbiBpc24ndCBwZXJmZWN0IHdlIGFsbG93IGZvciBhIHNtYWxsIG1hcmdpbiBvZiBlcnJvclxuICBpZiAod2lsZGNhcmRBcmVhcy5sZW5ndGggPT09IDEpIHtcbiAgICBpZiAoc3VtUGVyY2VudCA8PSAxMDAuMSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBpZiAoaXNEZXZNb2RlKCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihgYXMtc3BsaXQ6IFBlcmNlbnQgYXJlYXMgbXVzdCB0b3RhbCAxMDAlYClcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGlmIChzdW1QZXJjZW50IDwgOTkuOSB8fCBzdW1QZXJjZW50ID4gMTAwLjEpIHtcbiAgICBpZiAoaXNEZXZNb2RlKCkpIHtcbiAgICAgIGNvbnNvbGUud2FybignYXMtc3BsaXQ6IFBlcmNlbnQgYXJlYXMgbXVzdCB0b3RhbCAxMDAlJylcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHJldHVybiB0cnVlXG59XG4iXX0=