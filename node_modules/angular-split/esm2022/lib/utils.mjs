import { NgZone, computed, inject, numberAttribute, signal, untracked } from '@angular/core';
import { Observable, filter, fromEvent, merge } from 'rxjs';
/**
 * Only supporting a single {@link TouchEvent} point
 */
export function getPointFromEvent(event) {
    // NOTE: In firefox TouchEvent is only defined for touch capable devices
    const isTouchEvent = (e) => window.TouchEvent && event instanceof TouchEvent;
    if (isTouchEvent(event)) {
        if (event.changedTouches.length === 0) {
            return undefined;
        }
        const { clientX, clientY } = event.changedTouches[0];
        return {
            x: clientX,
            y: clientY,
        };
    }
    if (event instanceof KeyboardEvent) {
        const target = event.target;
        // Calculate element midpoint
        return {
            x: target.offsetLeft + target.offsetWidth / 2,
            y: target.offsetTop + target.offsetHeight / 2,
        };
    }
    return {
        x: event.clientX,
        y: event.clientY,
    };
}
export function gutterEventsEqualWithDelta(startEvent, endEvent, deltaInPx, gutterElement) {
    if (!gutterElement.contains(startEvent.target) ||
        !gutterElement.contains(endEvent.target)) {
        return false;
    }
    const startPoint = getPointFromEvent(startEvent);
    const endPoint = getPointFromEvent(endEvent);
    return Math.abs(endPoint.x - startPoint.x) <= deltaInPx && Math.abs(endPoint.y - startPoint.y) <= deltaInPx;
}
export function fromMouseDownEvent(target) {
    return merge(fromEvent(target, 'mousedown').pipe(filter((e) => e.button === 0)), 
    // We must prevent default here so we declare it as non passive explicitly
    fromEvent(target, 'touchstart', { passive: false }));
}
export function fromMouseMoveEvent(target) {
    return merge(fromEvent(target, 'mousemove'), fromEvent(target, 'touchmove'));
}
export function fromMouseUpEvent(target, includeTouchCancel = false) {
    const withoutTouchCancel = merge(fromEvent(target, 'mouseup'), fromEvent(target, 'touchend'));
    return includeTouchCancel
        ? merge(withoutTouchCancel, fromEvent(target, 'touchcancel'))
        : withoutTouchCancel;
}
export function sum(array, fn) {
    return array.reduce((sum, item) => sum + fn(item), 0);
}
export function toRecord(array, fn) {
    return array.reduce((record, item, index) => {
        const [key, value] = fn(item, index);
        record[key] = value;
        return record;
    }, {});
}
export function createClassesString(classesRecord) {
    return Object.entries(classesRecord)
        .filter(([, value]) => value)
        .map(([key]) => key)
        .join(' ');
}
/**
 * Creates a semi signal which allows writes but is based on an existing signal
 * Whenever the original signal changes the mirror signal gets aligned
 * overriding the current value inside.
 */
export function mirrorSignal(outer) {
    const inner = computed(() => signal(outer()));
    const mirror = () => inner()();
    mirror.set = (value) => untracked(inner).set(value);
    mirror.reset = () => untracked(() => inner().set(outer()));
    return mirror;
}
export function leaveNgZone() {
    return (source) => new Observable((observer) => inject(NgZone).runOutsideAngular(() => source.subscribe(observer)));
}
export const numberAttributeWithFallback = (fallback) => (value) => numberAttribute(value, fallback);
//# sourceMappingURL=data:application/json;base64,